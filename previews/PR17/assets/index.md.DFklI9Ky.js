import{_ as s,c as a,o as i,a7 as n}from"./chunks/framework.WXcGxftB.js";const u=JSON.parse('{"title":"OptiFloat.jl","description":"","frontmatter":{},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),e={name:"index.md"},t=n(`<h1 id="OptiFloat.jl" tabindex="-1"><code>OptiFloat.jl</code> <a class="header-anchor" href="#OptiFloat.jl" aria-label="Permalink to &quot;\`OptiFloat.jl\` {#OptiFloat.jl}&quot;">​</a></h1><div class="warning custom-block"><p class="custom-block-title">This package is a work in progress</p><p>This package only contains a proof of concept of a few simple examples. The following section shows how OptiFloat.jl currently works.</p></div><h2 id="What-is-OptiFloat?" tabindex="-1">What is OptiFloat? <a class="header-anchor" href="#What-is-OptiFloat?" aria-label="Permalink to &quot;What is OptiFloat? {#What-is-OptiFloat?}&quot;">​</a></h2><p>OptiFloat.jl rewrites floating point expressions to more accurate alternatives. It is a pure <strong>Julia implementation of <a href="https://herbie.uwplse.org/" target="_blank" rel="noreferrer">Herbie</a></strong>. For example, the function <code>f</code></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)</span></span></code></pre></div><p>is inaccurate for <code>x&gt;1</code>, because it subtracts two floating point values that are close to each other. Calling <code>f</code> with e.g. a <code>Float16</code> we get an inaccurate result:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3730</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.03125</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Compare to the more accurate <code>Float64</code> result:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> f</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3730.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.00818627789193016</span></span></code></pre></div><p>OptiFloat.jl rewrites this expression to a more accurate equivalent (<em>using the original, low precision <code>Float16</code>!</em>):</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using OptiFloat</span></span>
<span class="line"><span></span></span>
<span class="line"><span>result = @optifloat sqrt(x+1)-sqrt(x) T=Float16 batchsize=100</span></span>
<span class="line"><span>g = eval(result.improved)</span></span>
<span class="line"><span>result.improved</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3730</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> UndefVarError</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`g\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> not defined </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`Main\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Suggestion</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> check </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> spelling errors or </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">missing</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> imports.</span></span></code></pre></div><p>If we plot <code>g</code> we can see that it matches the more costly, higher precision evaluation of <code>f</code>:</p><div class="language-@example vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">@example</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>using CairoMakie</span></span>
<span class="line"><span></span></span>
<span class="line"><span>fig = Figure()</span></span>
<span class="line"><span>a1 = Axis(fig[1, 1]; xscale=log10, xlabel=&quot;x&quot;, ylabel=&quot;f(x)&quot;)</span></span>
<span class="line"><span>xs = Float16.(logrange(1, 4000, length=100))</span></span>
<span class="line"><span>lines!(</span></span>
<span class="line"><span>    a1, xs, f.(xs);</span></span>
<span class="line"><span>    color=1, colorrange=(1, 10), colormap=:tab10, linewidth=3,</span></span>
<span class="line"><span>    label=&quot;f(x) = sqrt(x+1) - sqrt(x) (Float16)&quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>lines!(</span></span>
<span class="line"><span>    a1, xs, f.(Float64.(xs));</span></span>
<span class="line"><span>    color=2, colorrange=(1, 10), colormap=:tab10, linewidth=3,</span></span>
<span class="line"><span>    label=&quot;f(x) = sqrt(x+1) - sqrt(x) (Float64)&quot;</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>lines!(</span></span>
<span class="line"><span>    a1, xs, g.(xs);</span></span>
<span class="line"><span>    color=3, colorrange=(1, 10), colormap=:tab10, linestyle=:dash,</span></span>
<span class="line"><span>    label=&quot;g(x) = 1/(sqrt(x+1) + sqrt(x)) (Float16)&quot;, linewidth=3</span></span>
<span class="line"><span>)</span></span>
<span class="line"><span>axislegend(a1)</span></span>
<span class="line"><span>fig</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>For more details on how <code>OptiFloat.jl</code> works and how to customize it to your needs, check out OptiFloat <a href="./internals">under the hood</a>.</p></div><h2 id="acknowledgements" tabindex="-1">Acknowledgements <a class="header-anchor" href="#acknowledgements" aria-label="Permalink to &quot;Acknowledgements&quot;">​</a></h2><p><code>OptiFloat.jl</code> is built on top of a number of great Julia packages. Most notably:</p><ul><li><p><a href="https://github.com/JuliaSymbolics/Metatheory.jl" target="_blank" rel="noreferrer"><code>Metatheory.jl</code></a> for everything related to expression rewriting &amp; simplification.</p></li><li><p><a href="https://github.com/SymbolicML/DynamicExpressions.jl" target="_blank" rel="noreferrer"><code>DynamicExpressions.jl</code></a> for computing local errors of floating point expressions.</p></li><li><p><a href="https://github.com/JuliaIntervals/IntervalArithmetic.jl" target="_blank" rel="noreferrer"><code>IntervalArithmetic.jl</code></a> to evaluate expressions on <code>Interval{BigFloat}</code> with arbitrary precision.</p></li></ul>`,18),l=[t];function p(o,h,r,c,k,d){return i(),a("div",null,l)}const E=s(e,[["render",p]]);export{u as __pageData,E as default};
