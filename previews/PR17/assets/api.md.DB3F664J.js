import{_ as i,c as s,o as a,a7 as e}from"./chunks/framework.WXcGxftB.js";const g=JSON.parse('{"title":"API","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"api.md","filePath":"api.md","lastUpdated":null}'),t={name:"api.md"},l=e(`<h1 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h1><p>API Documentation of OptiFloat.jl</p><h2 id="Main-OptiFloat-function/macro" tabindex="-1">Main <code>OptiFloat</code> function/macro <a class="header-anchor" href="#Main-OptiFloat-function/macro" aria-label="Permalink to &quot;Main \`OptiFloat\` function/macro {#Main-OptiFloat-function/macro}&quot;">​</a></h2><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.optifloat" href="#OptiFloat.optifloat">#</a> <b><u>OptiFloat.optifloat</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optifloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, steps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, interval_compatible</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The main function of OptiFloat.jl. Optimizes a floating point expression and returns a result object which contains an improved expression.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OptiFloat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float16, batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, steps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, interval_compatible</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> optifloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expr)</span></span></code></pre></div><p>For more convenient usage, see <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.@optifloat"><code>@optifloat</code></a></p><p><strong>Arguments</strong></p><ul><li><p><code>expr::Expr</code>: The <em>floating point</em> expression that should be optimized.</p></li><li><p><code>T::Type{&lt;:AbstractFloat}</code>: Floating point type that the expression should be evaluated on.</p></li><li><p><code>batchsize::Int</code>: Number of samples that OptiFloat will compute errors for. The samples are computed via <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.logsample-Tuple{DynamicExpressions.ExpressionModule.Expression, Int64}"><code>logsample</code></a> such that only samples which do not cause <code>DomainError</code>s/overflows are used.</p></li><li><p><code>steps::Int</code>: Number of times <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.search_candidates!-Union{Tuple{T}, Tuple{Vector{&lt;:OptiFloat.Candidate}, Matrix{T}}} where T"><code>search_candidates!</code></a> is called.</p></li><li><p><code>verbose::Bool</code>: Whether to print the final report or not.</p></li><li><p><code>interval_compatible::Bool</code>: If <code>false</code> the improved function only accepts normal numbers otherwise the <code>result.improved</code> will be an expression that accepts <code>Interval</code>s. In the latter case you have to load <code>IntervalArithmetic</code>, otherwise <code>eval(result.improved)</code> will fail.</p></li></ul><p><strong>Returns</strong></p><p>A <code>NamedTuple</code> with the folling fields:</p><ul><li><p><code>original::Expr</code>: The original expression that was attempted to be optimized.</p></li><li><p><code>improved::Expr</code>: The (potentially) improved expression.</p></li><li><p><code>orig_candidate::Candidate</code>: The <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.Candidate"><code>Candidate</code></a> of the original expression. This struct includes the error on the sampled points.</p></li><li><p><code>improved_regimes::PiecewiseRegime</code>: The struct that was used to generate <code>improved</code>.</p></li></ul><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.@optifloat" href="#OptiFloat.@optifloat">#</a> <b><u>OptiFloat.@optifloat</u></b> — <i>Macro</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@optifloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr kws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre></div><p>The main macro of OptiFloat.jl. Optimizes a floating point expression and returns a result object which contains an improved expression. Accepts the same keyword arguments as <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.optifloat"><code>optifloat</code></a>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OptiFloat</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @optifloat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float32 batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">improved)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># callable function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3730</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.00819</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><h2 id="Useful-internal-functions" tabindex="-1">Useful internal functions <a class="header-anchor" href="#Useful-internal-functions" aria-label="Permalink to &quot;Useful internal functions {#Useful-internal-functions}&quot;">​</a></h2><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.Candidate" href="#OptiFloat.Candidate">#</a> <b><u>OptiFloat.Candidate</u></b> — <i>Type</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Candidate{E</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,A</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,F</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Holds an original and a candidate expression, as well as their <code>biterror</code> and an indication if the candidate has already been used in <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.search_candidates!-Union{Tuple{T}, Tuple{Vector{&lt;:OptiFloat.Candidate}, Matrix{T}}} where T"><code>search_candidates!</code></a>. Should only be constructed via one of the two constructors below:</p><ul><li><p><code>Candidate(candidate::Expr, original::Expr, points::AbstractMatrix)</code></p></li><li><p><code>Candidate(candidate::Expr, points::AbstractMatrix)</code> (if candidate and original are the same)</p></li></ul><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="DynamicExpressions.ParseModule.parse_expression-Tuple{Type, Expr}" href="#DynamicExpressions.ParseModule.parse_expression-Tuple{Type, Expr}">#</a> <b><u>DynamicExpressions.ParseModule.parse_expression</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">parse_expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type{&lt;:AbstractFloat}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, expr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Parse a Julia <code>Expr</code> to a dynamic <code>Expression</code> that can be used to efficiently compute <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.local_biterror"><code>local_biterror</code></a>s.</p><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.infer_regimes-Union{Tuple{T}, Tuple{Union{Vector{&lt;:OptiFloat.Candidate}, Vector{&lt;:OptiFloat.Regime}}, Int64, Matrix{T}}} where T" href="#OptiFloat.infer_regimes-Union{Tuple{T}, Tuple{Union{Vector{&lt;:OptiFloat.Candidate}, Vector{&lt;:OptiFloat.Regime}}, Int64, Matrix{T}}} where T">#</a> <b><u>OptiFloat.infer_regimes</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">infer_regimes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(candidates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:Candidate}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, feature</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; kws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Pick as few candidates and their corresponding good regimes to define a <code>PiecewiseRegime</code> that represents an expression that performs well on all <code>points</code>.</p><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.local_biterror" href="#OptiFloat.local_biterror">#</a> <b><u>OptiFloat.local_biterror</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> local_biterror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Node{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ops</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractOperatorEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    accum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default_accum</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span></code></pre></div><p>Compute the error of the root node in <code>tree</code>. The children are evaluated exactly, such that only the error of the root node is returned. <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.local_biterrors"><code>local_biterrors</code></a> computes the local error for all nodes in the tree.</p><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.local_biterror-Union{Tuple{T}, Tuple{DynamicExpressions.NodeModule.Node{T}, DynamicExpressions.OperatorEnumModule.AbstractOperatorEnum, AbstractMatrix{T}}} where T" href="#OptiFloat.local_biterror-Union{Tuple{T}, Tuple{DynamicExpressions.NodeModule.Node{T}, DynamicExpressions.OperatorEnumModule.AbstractOperatorEnum, AbstractMatrix{T}}} where T">#</a> <b><u>OptiFloat.local_biterror</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> local_biterror</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    tree</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Node{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ops</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractOperatorEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    X</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractMatrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    accum</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">default_accum</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span></code></pre></div><p>Compute the error per node/operation in <code>tree</code>. For each node, the children are evaluated exactly, such that only the error of the current node is returned. <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.local_biterrors"><code>local_biterrors</code></a> computes the error for all nodes in the tree.</p><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.local_biterrors" href="#OptiFloat.local_biterrors">#</a> <b><u>OptiFloat.local_biterrors</u></b> — <i>Function</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">local_biterrors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AbstractArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Recursively call <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.local_biterror"><code>local_biterror</code></a> on all nodes in <code>expr</code> and return the local error for each node.</p><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.logsample-Tuple{DynamicExpressions.ExpressionModule.Expression, Int64}" href="#OptiFloat.logsample-Tuple{DynamicExpressions.ExpressionModule.Expression, Int64}">#</a> <b><u>OptiFloat.logsample</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">logsample</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expression</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; eval_exact</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Sample valid inputs to <code>expr</code>. If <code>eval_exact=false</code> <code>expr</code> is evaluated with <code>BigFloat</code>s so samples might be generated that cause overflow in the original floating point type of <code>expr</code>.</p><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.optifloat-Tuple{Expr, Type, Int64, Int64, Bool, Bool}" href="#OptiFloat.optifloat-Tuple{Expr, Type, Int64, Int64, Bool, Bool}">#</a> <b><u>OptiFloat.optifloat</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">optifloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Expr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, steps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, interval_compatible</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The main function of OptiFloat.jl. Optimizes a floating point expression and returns a result object which contains an improved expression.</p><p><strong>Example</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OptiFloat</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">expr </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> :(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">args </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (; T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float16, batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, steps</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, verbose</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, interval_compatible</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> optifloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expr)</span></span></code></pre></div><p>For more convenient usage, see <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.@optifloat"><code>@optifloat</code></a></p><p><strong>Arguments</strong></p><ul><li><p><code>expr::Expr</code>: The <em>floating point</em> expression that should be optimized.</p></li><li><p><code>T::Type{&lt;:AbstractFloat}</code>: Floating point type that the expression should be evaluated on.</p></li><li><p><code>batchsize::Int</code>: Number of samples that OptiFloat will compute errors for. The samples are computed via <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.logsample-Tuple{DynamicExpressions.ExpressionModule.Expression, Int64}"><code>logsample</code></a> such that only samples which do not cause <code>DomainError</code>s/overflows are used.</p></li><li><p><code>steps::Int</code>: Number of times <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.search_candidates!-Union{Tuple{T}, Tuple{Vector{&lt;:OptiFloat.Candidate}, Matrix{T}}} where T"><code>search_candidates!</code></a> is called.</p></li><li><p><code>verbose::Bool</code>: Whether to print the final report or not.</p></li><li><p><code>interval_compatible::Bool</code>: If <code>false</code> the improved function only accepts normal numbers otherwise the <code>result.improved</code> will be an expression that accepts <code>Interval</code>s. In the latter case you have to load <code>IntervalArithmetic</code>, otherwise <code>eval(result.improved)</code> will fail.</p></li></ul><p><strong>Returns</strong></p><p>A <code>NamedTuple</code> with the folling fields:</p><ul><li><p><code>original::Expr</code>: The original expression that was attempted to be optimized.</p></li><li><p><code>improved::Expr</code>: The (potentially) improved expression.</p></li><li><p><code>orig_candidate::Candidate</code>: The <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.Candidate"><code>Candidate</code></a> of the original expression. This struct includes the error on the sampled points.</p></li><li><p><code>improved_regimes::PiecewiseRegime</code>: The struct that was used to generate <code>improved</code>.</p></li></ul><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.print_report-Tuple{OptiFloat.Candidate, OptiFloat.PiecewiseRegime}" href="#OptiFloat.print_report-Tuple{OptiFloat.Candidate, OptiFloat.PiecewiseRegime}">#</a> <b><u>OptiFloat.print_report</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print_report</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(original</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Candidate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, rs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">PiecewiseRegime</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; rm_ansi</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>Output a report including a copy-pasteable function representing the <code>PiecewiseRegime</code>.</p><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.sample_finite-Tuple{Function, Function, Type, Int64, Int64}" href="#OptiFloat.sample_finite-Tuple{Function, Function, Type, Int64, Int64}">#</a> <b><u>OptiFloat.sample_finite</u></b> — <i>Method</i>. <p>Generate samples from <code>samplefn</code> that yield finite results when called with <code>testfn</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> samplefn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(T, inputsize)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> testfn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x)  </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> add to samples </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> isfinite</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(y)</span></span></code></pre></div><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.search_candidates!-Union{Tuple{T}, Tuple{Vector{&lt;:OptiFloat.Candidate}, Matrix{T}}} where T" href="#OptiFloat.search_candidates!-Union{Tuple{T}, Tuple{Vector{&lt;:OptiFloat.Candidate}, Matrix{T}}} where T">#</a> <b><u>OptiFloat.search_candidates!</u></b> — <i>Method</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">search_candidates!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(candidates</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{&lt;:Candidate}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, points</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{T}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {T}</span></span></code></pre></div><p>Try to find better candidate expressions than the ones that are already present in <code>candidates</code>. The first unused candidate will be attempted to improve and new candidate expression are added to <code>candidates</code>. Once a candidate is picked, this function goes through the following steps:</p><ol><li><p>Given an initial expression <code>candidate</code>, compute the <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.local_biterror"><code>local_biterror</code></a> of every subexpression and pick the subexpression <code>sub_expr</code> with the worst error for further analysis.</p></li><li><p>Recursively rewrite the <code>sub_expr</code> based on a <em>set of rewrite rules</em>, generating a number of new candidates.</p></li><li><p>Simplify the candidates via equality saturation (implemented in Metatheory.jl)</p></li><li><p>Compute error of new candidates and add every candidate that performs better on any of the <code>points</code> to the existing list.</p></li></ol><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br><div style="border-width:1px;border-style:solid;border-color:black;padding:1em;border-radius:25px;"><a id="OptiFloat.@optifloat-Tuple{Any, Vararg{Any}}" href="#OptiFloat.@optifloat-Tuple{Any, Vararg{Any}}">#</a> <b><u>OptiFloat.@optifloat</u></b> — <i>Macro</i>. <div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">@optifloat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> expr kws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span></span></code></pre></div><p>The main macro of OptiFloat.jl. Optimizes a floating point expression and returns a result object which contains an improved expression. Accepts the same keyword arguments as <a href="/OptiFloat.jl/previews/PR17/api#OptiFloat.optifloat"><code>optifloat</code></a>.</p><p><strong>Examples</strong></p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> using</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> OptiFloat</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> @optifloat</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x) T</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Float32 batchsize</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> eval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(result</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">improved)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># callable function</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> g</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3730</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Float16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.00819</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><a href="https://github.com/nmheim/OptiFloat.jl" target="_blank" rel="noreferrer">source</a></p></div><br>`,32),p=[l];function n(h,r,o,d,k,c){return a(),s("div",null,p)}const y=i(t,[["render",n]]);export{g as __pageData,y as default};
